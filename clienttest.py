import socket
import json

def encrypt_message_cesar(message, key):
    encrypted_message = ""
    for char in message:
        if char.isalpha():
            shift = key % 26
            if char.islower():
                encrypted_message += chr((ord(char) + shift - ord('a')) % 26 + ord('a'))
            else:
                encrypted_message += chr((ord(char) + shift - ord('A')) % 26 + ord('A'))
        else:
            encrypted_message += char
    return encrypted_message

def crypt_file(path, key):
    try:
        with open(path, 'r') as file:
            plaintext = file.read()
            encrypted_text=encrypt_message_cesar(plaintext, key)
        with open(path + "_encrypted", 'w') as encrypted_file:
            encrypted_file.write(encrypted_text)

        print("Encryption successful.")
    except Exception as e:
        print(f"Error: {e}")

def decrypt_file(path, key):
    try:
        with open(path, 'r') as file:
            encrypted_text = file.read()

        decrypted_text = ""
        for char in encrypted_text:
            if char.isalpha():
                shift = ord(char) - key
                if char.isupper():
                    if shift < ord('A'):
                        shift += 26
                elif char.islower():
                    if shift < ord('a'):
                        shift += 26
                decrypted_text += chr(shift)
            else:
                decrypted_text += char

        with open(path + "_decrypted", 'w') as decrypted_file:
            decrypted_file.write(decrypted_text)

        print("Decryption successful.")
    except Exception as e:
        print(f"Error: {e}")
def recuperer_action_parametres(chaine_json):
    try:
        # Charger la chaîne JSON en tant que dictionnaire
        action_parametres = json.loads(chaine_json)

        # Extraire l'action et les paramètres du dictionnaire
        action = action_parametres['action']
        parametres = action_parametres['parametres']

        # Retourner l'action et les paramètres
        return action, parametres

    except json.JSONDecodeError as e:
        print(f"Erreur lors du décryptage JSON : {e}")
        return None, None

def client_action(IP, PORT):
    # Gestion des sockets pour la connexion réseau
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        s.connect((IP, PORT))
        print("Connecté au serveur.")

        # Recevoir la chaîne JSON du serveur
        server_data = s.recv(1024)
        print("Données reçues du serveur:", server_data.decode())
        action_recuperee,parametres_recuperes= recuperer_action_parametres(server_data.decode())
        chemin = parametres_recuperes.get('path', None)
        print("Action reçue:", action_recuperee, "Paramètres reçus:", parametres_recuperes)
        if action_recuperee == "crypt":
            print(" if Action reçue=crypt:", action_recuperee, "Paramètres reçus dans if:", chemin)
        # Simuler une réponse du client
        client_response = "Action exécutée avec succès."
        s.send(client_response.encode())

    finally:
        print("Fermeture de la connexion.")
        s.close()

if __name__ == "__main__":
    IP = "127.0.0.1"  # Adresse IP du serveur (localhost dans ce cas)
    PORT = 8086       # Port utilisé par le serveur
    client_action(IP, PORT)
